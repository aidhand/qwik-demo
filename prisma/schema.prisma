generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum crdb_internal_region {
  gcp_asia_southeast1 @map("gcp-asia-southeast1")
  gcp_europe_west1    @map("gcp-europe-west1")
  gcp_us_west2        @map("gcp-us-west2")
}

model User {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  email       String       @unique
  name        String?
  units       Unit[]
  events      Event[]
  notes       Note[]
  tasks       Task[]
  definitions Definition[]
  assessments Assessment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Unit {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  code      String
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  content   String?
  completed Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  content   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Definition {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  content   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  content   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assessment {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  content   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
